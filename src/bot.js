const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs');
const chalk = require('chalk');

const client = new Client({
    authStrategy: new LocalAuth()
});

client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Bot is ready!');
});

client.on('disconnected', (reason) => {
    console.log('‚ï≠‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ ‚òÇ\n‚îÜ ‚ö†Ô∏è CONEXI√ìN PERDIDA CON EL SERVIDOR, RECONECTANDO....\n‚ï∞‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ ‚òÇ');
});

client.on('authenticated', () => {
    console.log('‚ï≠‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ ‚úì\n‚îÜ üå∏ CONECTANDO AL SERVIDOR...\n‚ï∞‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ ‚úì');
});

client.on('message', message => {
    const sender = message.from;
    const content = message.body;
    const isGroup = message.isGroupMsg;
    const groupName = isGroup ? `Grupo: ${message.chat.name}` : '';

    // Log message details in Termux
    console.log(chalk.blue(`Mensaje de: ${sender}\nContenido: ${content}\n${groupName}`));

    if (content.toLowerCase() === '.registrar' || content.toLowerCase() === '/registrar' || content.toLowerCase() === '#registrar') {
        message.reply('¬øPrefieres QR o c√≥digo? Responde con "QR" o "c√≥digo".');
    } else if (content.toLowerCase() === '.qr' || content.toLowerCase() === '/qr' || content.toLowerCase() === '#qr') {
        client.on('qr', (qr) => {
            qrcode.generate(qr, { small: true });
            message.reply('Escanea este QR para registrarte.');
        });
    } else if (content.toLowerCase() === '.c√≥digo' || content.toLowerCase() === '/c√≥digo' || content.toLowerCase() === '#c√≥digo') {
        message.reply('Por favor, ingresa tu n√∫mero de tel√©fono en el formato +1234567890.');
    } else if (content.startsWith('+')) {
        const phoneNumber = content.trim();
        if (/^\+\d{10,15}$/.test(phoneNumber)) {
            message.reply(`N√∫mero ${phoneNumber} registrado exitosamente.`);
        } else {
            message.reply('Formato de n√∫mero no v√°lido. Intenta nuevamente.');
        }
    } else if (content.toLowerCase() === '.listahoy' || content.toLowerCase() === '/listahoy' || content.toLowerCase() === '#listahoy') {
        if (listaHoy.length === 0) {
            message.reply('No hay personas en la lista de hoy.');
        } else {
            const lista = listaHoy.map((persona, index) => {
                return `${index + 1}. ${persona.numero} [‚úÖ]\nFecha de uni√≥n: ${persona.fecha}`;
            }).join('\n');
            message.reply(`Lista de hoy:\n${lista}\n\n¬øQuieres unirte a la lista? Responde con "Si".`);
        }
    } else if (content.toLowerCase() === '.listam√±' || content.toLowerCase() === '/listam√±' || content.toLowerCase() === '#listam√±') {
        if (listaManana.length >= LIMITE_PERSONAS) {
            message.reply('El l√≠mite de personas para ma√±ana ya est√° completo.');
        } else {
            const persona = {
                numero: sender,
                fecha: new Date().toLocaleString()
            };
            listaManana.push(persona);
            fs.writeFileSync('./data/listaManana.json', JSON.stringify(listaManana));
            message.reply('Te has agregado a la lista para ma√±ana.');
        }
    } else if (content.toLowerCase() === '.men√∫lista' || content.toLowerCase() === '/men√∫lista' || content.toLowerCase() === '#men√∫lista') {
        const listaHoyTexto = listaHoy.length === 0 ? 'No hay personas en la lista de hoy.' : listaHoy.map((persona, index) => `${index + 1}. ${persona.numero} - ${persona.fecha}`).join('\n');
        const listaMananaTexto = listaManana.length === 0 ? 'No hay personas en la lista de ma√±ana.' : listaManana.map((persona, index) => `${index + 1}. ${persona.numero} - ${persona.fecha}`).join('\n');

        message.reply(`Lista de hoy:\n${listaHoyTexto}\n\nLista de ma√±ana:\n${listaMananaTexto}`);
    } else if (content.toLowerCase() === '.borrar lista' || content.toLowerCase() === '/borrar lista' || content.toLowerCase() === '#borrar lista') {
        listaHoy = [];
        listaManana = [];
        fs.writeFileSync('./data/listaHoy.json', JSON.stringify(listaHoy));
        fs.writeFileSync('./data/listaManana.json', JSON.stringify(listaManana));
        message.reply('Todas las listas han sido borradas.');
    } else if (content.toLowerCase() === '.borrar lista de hoy' || content.toLowerCase() === '/borrar lista de hoy' || content.toLowerCase() === '#borrar lista de hoy') {
        listaHoy = listaManana;
        listaManana = [];
        fs.writeFileSync('./data/listaHoy.json', JSON.stringify(listaHoy));
        fs.writeFileSync('./data/listaManana.json', JSON.stringify(listaManana));
        message.reply('La lista de hoy ha sido eliminada. La lista de ma√±ana ahora es la lista de hoy y se ha creado una nueva lista para ma√±ana.');
    } else if (content.toLowerCase() === '.si' || content.toLowerCase() === '/si' || content.toLowerCase() === '#si') {
        if (listaHoy.some(persona => persona.numero === sender)) {
            message.reply('No puedes ser agregado m√°s de una vez en la lista, espera que el due√±o borre la lista de hoy para unirte.');
        } else if (listaManana.some(persona => persona.numero === sender)) {
            message.reply('Est√°s en la lista de ma√±ana, no puedes unirte a la lista de hoy.');
        } else {
            if (listaHoy.length >= LIMITE_PERSONAS) {
                message.reply('Se logr√≥ el l√≠mite de personas para hoy. ¬øQuieres apuntarte para ma√±ana? Escribe listaM√±.');
            } else {
                const persona = {
                    numero: sender,
                    fecha: new Date().toLocaleString()
                };
                listaHoy.push(persona);
                fs.writeFileSync('./data/listaHoy.json', JSON.stringify(listaHoy));
                message.reply('Te has agregado a la lista de hoy.');
            }
        }
    } else {
        message.reply('Comando no reconocido. Usa ".listahoy", ".listam√±", ".men√∫lista", ".borrar lista" o ".borrar lista de hoy".');
    }
});

client.initialize();
